import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class AnxietyBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        init_db()  # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
        keyboard = [
            [InlineKeyboardButton("üöÄ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø", callback_data="start_test")],
            [InlineKeyboardButton("‚ùì –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?", callback_data="what_is_it")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "start_test":
            await self.start_test(query, context)
        elif data == "what_is_it":
            await self.show_explanation(query)
        elif data == "begin_test":
            await self.show_question(query, context, 1)
        elif data.startswith("answer_"):
            await self.handle_answer(query, context, data)
        elif data == "retake_test":
            await self.start_test(query, context)
        elif data == "share_result":
            await self.share_result(query)
        elif data == "get_techniques":
            await self.check_subscription(query, context)
        elif data == "check_subscription":
            await self.check_subscription(query, context)
    
    async def start_test(self, query, context):
        """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
        user_id = query.from_user.id
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        context.user_data.clear()
        context.user_data['answers'] = {}
        context.user_data['current_question'] = 1
        
        await self.show_question(query, context, 1)
    
    async def show_explanation(self, query):
        """–ü–æ–∫–∞–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —á—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Ç–∏–ø—ã"""
        keyboard = [[InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ, –ø–æ–≥–Ω–∞–ª–∏!", callback_data="begin_test")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            EXPLANATION_MESSAGE,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_question(self, query, context, question_num):
        """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
        if question_num > len(QUESTIONS):
            await self.calculate_result(query, context)
            return
        
        question_data = QUESTIONS[question_num - 1]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for i, option in enumerate(question_data['options']):
            callback_data = f"answer_{question_num}_{chr(65+i)}"  # A, B, C, D
            keyboard.append([InlineKeyboardButton(option, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        question_text = f"**–í–æ–ø—Ä–æ—Å {question_num} –∏–∑ {len(QUESTIONS)}**\n\n{question_data['text']}\n\n**–¢–≤–æ—è —Ä–µ–∞–∫—Ü–∏—è:**"
        
        await query.edit_message_text(
            question_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_answer(self, query, context, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: answer_1_A
        parts = callback_data.split('_')
        question_num = int(parts[1])
        answer = parts[2]
        
        user_id = query.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        context.user_data['answers'][question_num] = answer
        save_user_answer(user_id, question_num, answer)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question = question_num + 1
        await self.show_question(query, context, next_question)
    
    async def calculate_result(self, query, context):
        """–ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞"""
        answers = context.user_data.get('answers', {})
        user_id = query.from_user.id
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–æ–≤
        count_a = sum(1 for answer in answers.values() if answer == 'A')
        count_b = sum(1 for answer in answers.values() if answer == 'B')
        count_c = sum(1 for answer in answers.values() if answer == 'C')
        count_d = sum(1 for answer in answers.values() if answer == 'D')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
        max_count = max(count_a, count_b, count_c, count_d)
        
        if count_a == max_count and count_a >= 4:
            result_type = "calm"
        elif count_b == max_count:
            result_type = "catastrophizer"
        elif count_c == max_count:
            result_type = "mind_reader"
        elif count_d == max_count:
            result_type = "perfectionist"
        else:
            result_type = "mixed"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
        save_user_result(user_id, result_type, answers)
        
        await self.show_result(query, result_type)
    
    async def show_result(self, query, result_type):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result_text = RESULTS[result_type]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä—É–≥–æ–π", callback_data="share_result")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data="retake_test")],
            [InlineKeyboardButton("‚úÖ –£–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –º—ã—Å–ª–µ—á—Ç–µ–Ω–∏—è", callback_data="get_techniques")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def share_result(self, query):
        """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
        share_text = "üîÆ –Ø —É–∑–Ω–∞–ª–∞ —Å–≤–æ–π —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —Ç–∏–ø! –ê —Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫–∞—è —Ç—ã —Ç—Ä–µ–≤–æ–∂–∏—Ü–∞?\n\n–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç: t.me/your_bot_username"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data="retake_test")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"**–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ä—É–≥–µ:**\n\n{share_text}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def check_subscription(self, query, context):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
            
            if chat_member.status in ['member', 'administrator', 'creator']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫–∏
                await self.send_techniques(query)
            else:
                # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await self.show_subscription_reminder(query)
                
        except Exception as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await self.show_subscription_reminder(query)
    
    async def send_techniques(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫—É"""
        keyboard = [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä—É–≥–æ–π", callback_data="share_result")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            TECHNIQUES_MESSAGE,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_subscription_reminder(self, query):
        """–ü–æ–∫–∞–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        keyboard = [
            [InlineKeyboardButton("üëÜ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            SUBSCRIPTION_REMINDER,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling()

if __name__ == '__main__':
    bot = AnxietyBot()
    bot.run()
